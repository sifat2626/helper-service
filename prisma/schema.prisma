generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String       @unique
  password  String
  role      UserRoleEnum @default(USER)
  status    UserStatus   @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())

  // One-to-many relationship for the user's favorite maids
  favorites Favorite[]
  Booking   Booking[]

  @@map("users")
}

model PasswordReset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otp       String
  isUsed    Boolean
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model Maid {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  age          Int
  nationality  String   @default("unknown")
  experience   Int // Years of experience
  photo        String? // URL to the maid's photo
  biodataUrl   String? // URL to download PDF biodata
  workHistory  String   @default("First Timer")
  availability Boolean  @default(true)
  rating       Float?   @default(0) // Default rating is 0, optional if not rated
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  Booking      Booking[]
  Favorite     Favorite[]
  MaidServices MaidService[]

  @@map("maids")
}

model Booking {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  maidId String @db.ObjectId

  maid Maid @relation(fields: [maidId], references: [id])
  user User @relation(fields: [userId], references: [id])

  date      DateTime // Booking date
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())

  @@map("bookings")
}

model Service {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  MaidServices MaidService[]

  @@map("services")
}

model MaidService {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Maid      Maid?    @relation(fields: [maidId], references: [id])
  maidId    String?  @db.ObjectId
  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?  @db.ObjectId

  @@unique([maidId, serviceId])
  @@map("maid_services")
}

model Favorite {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  maidId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  maid Maid @relation(fields: [maidId], references: [id])

  createdAt DateTime @default(now())

  @@map("favorites")
}

enum BookingStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum UserRoleEnum {
  USER
  SUPERADMIN
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}
